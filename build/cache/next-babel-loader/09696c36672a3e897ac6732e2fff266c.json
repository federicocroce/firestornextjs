{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nimport firebase from 'firebase';\n\ntry {\n  firebase.initializeApp({\n    apiKey: 'AIzaSyDINSbmIwTdqRE7yDhkow46fs3JxW5y8KM',\n    authDomain: 'test-74eeb.firebaseapp.com',\n    databaseURL: 'https://test-74eeb.firebaseio.com',\n    projectId: 'test-74eeb',\n    storageBucket: 'test-74eeb.appspot.com',\n    messagingSenderId: '984496005171',\n    appId: '1:984496005171:web:1223101227209a12284346',\n    measurementId: 'G-H81H426MJZ'\n  });\n} catch (err) {\n  // we skip the \"already exists\" message which is\n  // not an actual error when we're hot-reloading\n  if (!/already exists/.test(err.message)) {\n    console.error('Firebase initialization error raised', err.stack);\n  }\n}\n\nvar firebaseApp = firebase;\nvar db = firebaseApp.firestore(); // export const get = async () => {\n//   console.log(\"G 1\");\n//   return db.collection(\"test\").get().then((querySnapshot) => {\n//     console.log(\"G 2\");\n//     return querySnapshot.forEach((doc) => {\n//       console.log(\"G 3\");\n//       console.log(`${doc.id} => ${doc.data()}`);\n//       return \"Fede\"\n//     });\n//   })\n// };\n\nexport var get2 = function get2() {\n  var res;\n  return _regeneratorRuntime.async(function get2$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"G 1\");\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(db.collection(\"test\").get());\n\n        case 3:\n          res = _context.sent;\n          res.then(function (querySnapshot) {\n            console.log(\"G 2\");\n            var data = {};\n            querySnapshot.forEach(function (doc) {\n              console.log(\"G 3\");\n              console.log(\"\".concat(doc.id, \" => \").concat(doc.data()));\n              data = (_readOnlyError(\"data\"), doc.data());\n            });\n            console.log(\"G 4\");\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getB = function getB() {\n  var data;\n  return _regeneratorRuntime.async(function getB$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          console.log('getB1');\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(get2());\n\n        case 4:\n          data = _context2.sent;\n          console.log('getB2', data); // return res.status(200).json(data)\n\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0); // return res.status(500).json({ error })\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\nexport var test = function test() {\n  return _regeneratorRuntime.async(function test$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", {\n            data: 'DATA'\n          });\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var get = function get() {\n  var snapshot, data;\n  return _regeneratorRuntime.async(function get$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(db.collection('test').get());\n\n        case 2:\n          snapshot = _context4.sent;\n          data = {};\n          snapshot.docs.map(function (doc) {\n            Object.assign(data, _defineProperty({}, doc.id, doc.data()));\n          });\n          return _context4.abrupt(\"return\", data);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var fetch = function fetch(collection, setData) {\n  return _regeneratorRuntime.async(function fetch$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          db.collection(collection).onSnapshot(function (querySnapshot) {\n            var data = [];\n            querySnapshot.forEach(function (doc) {\n              data.push(doc.data().data);\n            });\n            console.log(data);\n            setData(data);\n          });\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":null,"metadata":{},"sourceType":"module"}