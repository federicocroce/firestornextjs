{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from '../components/Header';\nimport firebase from 'firebase';\n\ntry {\n  firebase.initializeApp({\n    apiKey: 'AIzaSyDINSbmIwTdqRE7yDhkow46fs3JxW5y8KM',\n    authDomain: 'test-74eeb.firebaseapp.com',\n    databaseURL: 'https://test-74eeb.firebaseio.com',\n    projectId: 'test-74eeb',\n    storageBucket: 'test-74eeb.appspot.com',\n    messagingSenderId: '984496005171',\n    appId: '1:984496005171:web:1223101227209a12284346',\n    measurementId: 'G-H81H426MJZ'\n  });\n} catch (err) {\n  // we skip the \"already exists\" message which is\n  // not an actual error when we're hot-reloading\n  if (!/already exists/.test(err.message)) {\n    console.error('Firebase initialization error raised', err.stack);\n  }\n}\n\nvar firebaseApp = firebase; // import * as firebaseApp from 'firebase'\n// const firebaseConfig = {\n//   apiKey: 'AIzaSyDINSbmIwTdqRE7yDhkow46fs3JxW5y8KM',\n//   authDomain: 'test-74eeb.firebaseapp.com',\n//   databaseURL: 'https://test-74eeb.firebaseio.com',\n//   projectId: 'test-74eeb',\n//   storageBucket: 'test-74eeb.appspot.com',\n//   messagingSenderId: '984496005171',\n//   appId: '1:984496005171:web:1223101227209a12284346',\n//   measurementId: 'G-H81H426MJZ'\n// }\n// firebaseApp.initializeApp(firebaseConfig)\n\nvar db = firebaseApp.firestore(); // const get = () => db.collection(\"test\").get().then((querySnapshot) => {\n//   return querySnapshot.forEach((doc) => {\n//     console.log(`${doc.id} => ${doc.data()}`);\n//     return doc.id;\n//   });\n// })\n\nexport var __N_SSG = true;\nexport default function About(_ref) {\n  var data = _ref.data;\n  return __jsx(\"div\", null, __jsx(Header, null), __jsx(\"p\", null, \"This is the about page\"), __jsx(\"p\", null, Object.keys(data).map(function (key) {\n    return data[key].data;\n  })));\n} // const getData = async () => {\n//   console.log('1');\n//   await sleep(5000)\n//   console.log('2');\n//   return \"Fede Croce\"\n// };\n// export async function getServerSideProps() {\n//   const data = await getTest()\n//     console.log('getStaticProps', data);\n//     return {\n//       props: {\n//         data: !data ? \"DATA False\" : data,\n//       },\n//     }\n// }\n\n// export async function getStaticProps() {\n//   const data = {}\n//   const snapshot = await db.collection('test').get()\n//   snapshot.docs.map(doc => {\n//     doc.data()\n//     Object.assign(data, {\n//       [doc.id]: doc.data()\n//     });\n//   });\n//   console.log(data);\n//   return {\n//     props: {\n//       data: !data ? \"DATA False\" : data,\n//     },\n//   }\n// }\n// const getTest =  () => new Promise(function (resolve, reject) {\n//   db.collection(\"test\").onSnapshot(querySnapshot => {\n//     console.log(\"getTest2\");\n//     var data = [];\n//     querySnapshot.forEach(function (doc) {\n//       data.push(doc.data().data);\n//     });\n//     console.log(\"getTest3\");\n//     console.log(data);\n//     // return data;\n//     console.log(\"getTest4\");\n//     resolve(data);\n//   });\n// });\n// const getTest = async () =>  db.collection(\"test\").onSnapshot(querySnapshot => {\n//     console.log(\"getTest2\");\n//     var data = [];\n//     querySnapshot.forEach(function (doc) {\n//       data.push(doc.data().data);\n//     });\n//     console.log(\"getTest3\");\n//     console.log(data);\n//     // return data;\n//     console.log(\"getTest4\");\n//     return data;\n//   });\n// const snapshot = await db.collection('test').get()\n// snapshot.docs.map(doc => {\n//   doc.data()\n//   Object.assign(payload, {\n//     [doc.id]: doc.data()\n//   });\n// });\n//   return payload\nvar getTestFormattedFucniona = function getTestFormattedFucniona() {\n  var payload, snapshot;\n  return _regeneratorRuntime.async(function getTestFormattedFucniona$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = {};\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(db.collection('test').get());\n\n        case 3:\n          snapshot = _context2.sent;\n          snapshot.docs.map(function (doc) {\n            doc.data();\n            Object.assign(payload, _defineProperty({}, doc.id, doc.data()));\n          });\n          return _context2.abrupt(\"return\", payload);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}; // const getTestFormattedFucniona = async () => {\n//   let payload = {};\n//   const snapshot = await db.collection('test').get()\n//   snapshot.docs.map(doc => {\n//     doc.data()\n//     Object.assign(payload, {\n//       [doc.id]: doc.data()\n//     });\n//   });\n//   return payload\n// }\n\n\nvar getTestFUnciona = function getTestFUnciona() {\n  var snapshot;\n  return _regeneratorRuntime.async(function getTestFUnciona$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.collection('test').get());\n\n        case 2:\n          snapshot = _context3.sent;\n          console.log(snapshot.docs);\n          return _context3.abrupt(\"return\", snapshot.docs.map(function (doc) {\n            return doc.data();\n          }));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}; // const getTestSnapshot = async () => {\n//   const res = await db.collection(\"test\")\n//   let result = {};\n//   res.onSnapshot(function (snapshot) {\n//     snapshot.docChanges().forEach((change) => {\n//       Object.assign(result, {\n//         [change.doc.id]: change.doc.data()\n//       });\n//     });\n//     console.log('getTestSnapshot', result);\n//     return result;\n//   })\n// }\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries. See the \"Technical details\" section.\n// export async function getStaticProps() {\n//   let data = await db.collection(\"test\").onSnapshot(snapshot => {\n//     const payload = {};\n//     console.log(\"1\");\n//     snapshot.docChanges().forEach((change) => {\n//       console.log(\"2\");\n//         Object.assign(payload, {\n//             [change.doc.id]: change.doc.data()\n//         });\n//       console.log('payload2', payload);\n//     });\n//     console.log(\"3\");\n//     console.log('payload3', payload);\n//     return JSON.stringify(payload);\n// });\n// // let data = await (async () => {\n// //   sleep(5000)\n// //   return \"Fede\"\n// // })();\n//   // const data = {data: \"DATA\"}\n//   console.log(\"4\");\n//   console.log('data CLG', data);\n//   // By returning { props: posts }, the Blog component\n//   // will receive `posts` as a prop at build time\n//   return {\n//     props: {\n//       data: !data ? \"DATA False\" : data,\n//     },\n//   }\n// }\n\n\nvar sleep = function sleep(ms, nombre) {\n  return new Promise(function (res) {\n    return setTimeout(res, ms, nombre);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}